#!/usr/bin/env python
# -*- coding: utf-8 -*_
"""Command line tool of rawhdr."""

import os

import click
import imageio
import rawpy

import rawhdr


def print_version(ctx, _, value):
    """Print version information."""
    if not value or ctx.resilient_parsing:
        return
    click.echo('rawHDR version ' + rawhdr.__version__ + '\n'
               'Copyright (C) 2019 Felix Thaler')
    ctx.exit()


def load_image(path):
    """Load a raw image file.

    Parameters
    ----------
    path : str
        Path to the image file.

    Returns
    -------
    image : ndarray
        Loaded image data in linear color space.
    """
    with rawpy.imread(path) as raw:
        rgb = raw.postprocess(gamma=(1, 1),
                              no_auto_bright=True,
                              use_camera_wb=True,
                              output_bps=16,
                              half_size=True)
    return rgb.astype('float32') / 2**16


@click.command()
@click.argument('images', nargs=-1, type=click.Path(exists=True))
@click.option('--output', '-o', type=click.Path())
@click.option('--mask-width', type=float, default=0.8)
@click.option('--blend-width', type=float, default=0.2)
@click.option('--blend-cap', type=float, default=0.1)
@click.option('--target-gamma', type=float, default=2.2)
@click.option('--version',
              '-v',
              is_flag=True,
              callback=print_version,
              expose_value=False,
              is_eager=True)
def cli(images, output, mask_width, blend_width, blend_cap, target_gamma):
    """Main entry point."""
    if output is None:
        output = os.path.splitext(images[0])[0] + '-hdr.exr'

    images = [load_image(image) for image in images]

    merged = rawhdr.merge_exposures(images,
                                    mask_width=mask_width,
                                    blend_width=blend_width,
                                    blend_cap=blend_cap,
                                    target_gamma=target_gamma)

    imageio.imsave(output, merged.astype('float32'))


if __name__ == '__main__':
    cli()
